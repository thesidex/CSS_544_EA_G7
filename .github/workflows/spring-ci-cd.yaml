  name: Spring Boot CI/CD Pipeline

  on: [push, pull_request]

  jobs:
    build-and-test:
      environment: deploy
      runs-on: ubuntu-latest

      services:
        mysql:
          image: mysql:5.7
          env:
            MYSQL_ROOT_PASSWORD: pass
            MYSQL_DATABASE: cs544
          ports:
            - 3306:3306
          options: --health-cmd="mysqladmin ping -h localhost" --health-interval=10s --health-timeout=5s --health-retries=5

        activemq:
          image: symptoma/activemq:latest
          ports:
            - 61616:61616
            - 8161:8161
      steps:
        - uses: actions/checkout@v2

        - name: Setup enviornment variables
          run: |
            touch cs544-202403-project/src/main/resources/.env
            echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> cs544-202403-project/src/main/resources/.env
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> cs544-202403-project/src/main/resources/.env
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> cs544-202403-project/src/main/resources/.env
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> cs544-202403-project/src/main/resources/.env
            echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> cs544-202403-project/src/main/resources/.env
            echo "ACTIVEMQ_BROKER_URL=${{ secrets.ACTIVEMQ_BROKER_URL }}" >> cs544-202403-project/src/main/resources/.env
            echo "ACTIVEMQ_USERNAME=${{ secrets.ACTIVEMQ_USERNAME }}" >> cs544-202403-project/src/main/resources/.env
            echo "ACTIVEMQ_PASSWORD=${{ secrets.ACTIVEMQ_PASSWORD }}" >> cs544-202403-project/src/main/resources/.env
            cat cs544-202403-project/src/main/resources/.env
        - name: Set up JDK 21
          uses: actions/setup-java@v2
          with:
            java-version: '21'
            distribution: 'adopt'

        - name: Cache Maven dependencies
          uses: actions/cache@v2
          with:
            path: |
              ~/.m2/repository
              !~/.m2/repository/org/example
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: |
              ${{ runner.os }}-m2-

        - name: Install common-base-module dependencies
          run: |
            cd common-base-module
            mvn install 

        - name: Build and test with Maven
          run: |
            cd cs544-202403-project
            mvn clean package
          env:
            DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

        - name: Verify Maven build artifacts in cs544-202403-project
          run: |
            echo "Listing contents of cs544-202403-project/target/"
            ls -l cs544-202403-project/target/
            echo "Verifying JAR file presence"
            ls -l cs544-202403-project/target/*.jar

        - name: Heroku Container Registry Login
          if: github.event_name == 'push'
          run: echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

        - name: Install tree
          run: sudo apt-get update && sudo apt-get install tree

        - name: Copy jar
          run: |
            cd cs544-202403-project && cp target/*.jar .

        - name: List build artifacts
          if: github.event_name == 'push'
          run: tree cs544-202403-project

        - name: Build Docker Image
          if: github.event_name == 'push'
          run: cd cs544-202403-project && docker build -t my-app -f Dockerfile .

        - name: Tag Image
          if: github.event_name == 'push'
          run: docker tag my-app registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

        - name: Push to Heroku
          if: github.event_name == 'push'
          run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

        - name: Release Image on Heroku
          if: github.event_name == 'push'
          run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
          env:
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

